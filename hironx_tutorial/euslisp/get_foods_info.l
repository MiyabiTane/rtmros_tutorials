#!/usr/bin/env roseus

;;Rostopic
(ros::load-ros-package "jsk_recognition_msgs")
(setq *camera-frame* "head_camera_rgb_optical_frame")
(ros::advertise "/coral_rects_info" jsk_recognition_msgs::RectArray 1)
(setq *pub-topic* "/xyz_to_screenpoint/input")
(ros::advertise *pub-topic* geometry_msgs::PointStamped 1)
(ros::rate 1)

;;keep info
(setq name_list '())
(setq pos_list '())
(setq box_list '())
(setq lbox_length nil)

;;use tf
(unless (boundp '*tfl*)
  (setq *tfl* (instance ros::transform-listener :init)))


;;Only for draw
(defun draw (*food-pos* *box-len* *box-wid* *box-hei*)
  (setq *target-food* (make-cube *box-wid* *box-len* *box-hei*))
  (send *target-food* :locate *food-pos*)
  (send *target-food* :set-color :salmon)
  (objects *target-food*)
  )

;;use xyz_to_screenpoint
(defun publish-3Dcoords (x y z)
  (format t "publish 3D coords ~A ~A ~A~%" x y z)
  (setq pub_msg (instance geometry_msgs::PointStamped :init))
  (send (send pub_msg :point) :x x)
  (send (send pub_msg :point) :y y)
  (send (send pub_msg :point) :z z)
  ;;(ros::publish *pub-topic* pub_msg)
  )
  
;;ほぼ同じtimeStampedの情報を取ってくる
(defun get_box_cb (msg)
  (setq b_cb_lst (append b_cb_lst (list msg)))
  (format t "Called box~%")
  ;;(format t "box list ~A~%" b_cb_lst)
  )

(defun get_name_cb (msg)
  (setq n_cb_lst (append n_cb_lst (list msg)))
  ;;(format t "name list ~A~%" n_cb_lst)
  (format t "Called name~%")
  )

(defun get_rects_cb (msg)
  (setq r_cb_lst (append r_cb_lst (list msg)))
  (format t "Called rects ~%")
  )

(defun imgpro_cb (msg)
  (setq got_rects_list (send msg :rects))
  (format t "Called imgpro result~%")
  )

(defun pub_sub_rects (pub_msg)
  (format t "start image processing~%")
  (setq got_rects_list '())
  (setq pub_rects_msg (instance jsk_recognition_msgs::RectArray :init))
  (dotimes (i (length (send pub_msg :rects)))
    (setq got_rect (elt (send pub_msg :rects) i))
    (setq rect_msg (instance jsk_recognition_msgs::Rect :init))
    (send rect_msg :x (send got_rect :x))
    (send rect_msg :y (send got_rect :y))
    (send rect_msg :width (send got_rect :width))
    (send rect_msg :height (send got_rect :height))
    (send pub_rects_msg :rects (append (send pub_rects_msg :rects) (list rect_msg)))
    )
  (ros::subscribe "/result_of_imageprocessing" jsk_recognition_msgs::RectArray #'imgpro_cb)
  (until got_rects_list
	 (ros::publish "/coral_rects_info" pub_rects_msg)
	 (ros::spin-once)
	 (ros::sleep)
	 )  
    )
      
(defun sync_info ()
  (dotimes (i 2)
    (setq b_time (send (send (send (elt b_cb_lst i) :header) :stamp) :sec-nsec))
    (format t "time ~A~%" b_time)
    (dotimes (j 2)
      (setq c_time (send (send (send (elt n_cb_lst j) :header) :stamp) :sec-nsec))
      (format t "time ~A~%" c_time)
      (dotimes (k 2)
	(setq r_time (send (send (send (elt r_cb_lst k) :header) :stamp) :sec-nsec))
	(format t "time ~A~%" r_time)
	(when (and (and (= (elt b_time 0) (elt c_time 0)) (= (elt b_time 0) (elt r_time 0)))
		   (and (< (abs (- (elt b_time 1) (elt c_time 1))) 10000000)
			(< (abs (- (elt b_time 1) (elt r_time 1))) 10000000)))
	  (format t "FIND~%")
	  (setq box_msg (elt b_cb_lst i))
	  (setq name_msg (elt n_cb_lst j))
	  (setq rect_msg (elt r_cb_lst k))
	  ))))
  (ros::unsubscribe "/edgetpu_boxes_synchronizer/pub_00")
  (ros::unsubscribe "/edgetpu_boxes_synchronizer/pub_01")
  (ros::unsubscribe "/edgetpu_boxes_synchronizer/pub_02")
  (pub_sub_rects rect_msg)
  )

(defun lbox_size_cb (msg)
  (if lbox_top
      (progn
	(setq lbox_bottom (send (send msg :point) :y))
	(setq lbox_length (- lbox_top lbox_bottom)))
    (setq lbox_top (send (send msg :point) :y)))
  )
  

(defun get_list ()
  ;;結果を格納していく
  (setq name_list (send name_msg :label_names))
  ;;got_rects_listにRGB画像中のおかずの縦横の大きさが格納されている
  (setq boxes (send box_msg :boxes))
  (dotimes (i (length boxes))
    (setq bbox (elt boxes i))
    (setq cascoords (send (send *tfl* :lookup-transform "WAIST" (send bbox :header :frame_id) (ros::time 0))
				    :transform (ros::tf-pose->coords (send bbox :pose))))
    (setq coords (send cascoords :worldpos))
    ;;(format t "coords ~A~%" coords)
    (setq pos_list (list-insert coords (length pos_list) pos_list))
    (setq size (ros::tf-point->pos (send bbox :dimensions)))
    ;;おかずの縦横の大きさは画像処理の結果を使う
    (setq rect (elt got_rects i))
    (setq x_ (* (/ (send rect x) lbox_length) *length*))
    (setq y_ (* (/ (send rect y) lbox_length) *length*))
    (setq size_list (list x_ y_ (elt size 2)))
    ;;(format t "size ~A~%" size_list)
    (setq box_list (list-insert size_list (length box_list) box_list))
    )
  )
  

(defun main_loop ()
  (publish-3Dcoords back right *G-z*)
  (ros::subscribe "/xyz_to_screenpoint/output" geometry_msgs::PointStamped #'lbox_size_cb)
  (until lbox_top
	 (ros::publish *pub-topic* pub_msg)
	 (ros::spin-once)
	 (ros::sleep))
  (format t "lbox_top ~A~%" lbox_top)
  (publish-3Dcoords *front* right *G-z*)
  (until lbox_bottom
	 (ros::publish *pub-topic* pub_msg)
	 (ros::spin-once)
	 (ros::sleep))
  (format t "lbox_bottom ~A~%" lbox_bottom)
  (ros::unsubscribe "/xyz_to_screenpoint/output")
  (ros::subscribe "/edgetpu_boxes_synchronizer/pub_00" jsk_recognition_msgs::ClassificationResult #'get_name_cb)
  (ros::subscribe "/edgetpu_boxes_synchronizer/pub_01" jsk_recognition_msgs::BoundingBoxArray #'get_box_cb)
  (ros::subscribe "/edgetpu_boxes_synchronizer/pub_02" jsk_recognition_msgs::RectArray #'get_rects_cb)
  (while (and (and (< (length b_cb_lst) 2) (< (length n_cb_lst) 2) (< (length r_cb_lst) 2)))
    ;;(format t "Called~%")
    (ros::spin-once)
    (ros::sleep)
    )
  (sync_info)
  )


(defun get_foods_info_main ()
  (format t "- - - GET FOODS INFO - - -~%")
  (move_hand_out_of_camera)
  (setq b_cb_lst '())
  (setq n_cb_lst '())
  (setq r_cb_lst '())
  (setq lbox_top nil)
  (setq lbox_bottom nil)
  (main_loop)
  )
