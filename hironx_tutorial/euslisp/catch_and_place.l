#!/usr/bin/env roseus

(ros::roseus-add-msgs "hironx_tutorial")
(ros::advertise "/get_placed_pos/input" hironx_tutorial::LunchBoxStatus 1)
(setq pub_status_msg (instance hironx_tutorial::LunchBoxStatus :init))
(setq OPEN_TH 12)

(defun place-init-pose ()
  (send *hironxjsk* :reset-manip-pose)
  (send *hironxjsk* :larm_joint4 :joint-angle -35)
  (send *hironxjsk* :larm :move-end-pos #f(0 0 100) :world)
  (send *hironxjsk* :rarm :move-end-pos #f(50 0 150) :world)
  (send *hironxjsk* :rarm_joint5 :joint-angle -75)
  (send *hironxjsk* :rarm_joint3 :joint-angle 35)
  (send *hironxjsk* :rarm_joint4 :joint-angle 48)
  (look-73b2-table)
  (send *hironxjsk* :larm :move-end-pos #f(0 160 0) :world)
  (send-robot)
  )

(defun pub-lbox-coords ()
  (send (send pub_status_msg :ltop) :x (elt ltop 0))
  (send (send pub_status_msg :ltop) :y (elt ltop 1))
  (send (send pub_status_msg :lbottom) :x (elt lbottom 0))
  (send (send pub_status_msg :lbottom) :y (elt lbottom 1))
  (send (send pub_status_msg :rtop) :x (elt rtop 0))
  (send (send pub_status_msg :rtop) :y (elt rtop 1))
  (send (send pub_status_msg :rbottom) :x (elt rbottom 0))
  (send (send pub_status_msg :rbottom) :y (elt rbottom 1))
  )

(defun open-chops (size)
  (setq size_zero #f(-30.449 30.449 30.449 -30.449))
  (setq size_23 #f(15.449 -15.449 -15.449 15.449))
  (setq plus (scale (/ size 23.0) size_23))
  (setq target_hand (v+ size_zero plus))
  (send *hironxjsk* :hand-angle-vector :lhand target_hand)
  (send-left-hand 2.0)
  )

(defun close-chops-absolute ()
  (send *hironxjsk* :hand-angle-vector :lhand #f(-25.449 25.449 25.449 -25.449))
  (send-left-hand 2.0)
  )

(defun close-chops ()
  (setq not_find_flag nil)
  (setq close #f(-5 5 5 -5))
  (setq diff 0)
  (while (< diff 2.15)
    (setq prev_hand (send *ri* :hand-angle-vector :lhand))
    (send *hironxjsk* :hand-angle-vector :lhand (v+ prev_hand close))
    (send-left-hand 2.0)
    (setq cur_hand (send *ri* :hand-angle-vector :lhand))
    (setq diff (norm (v- (v- cur_hand prev_hand) close)))
    (format t "diff ~A~%" diff)
    (when (and (< diff 2.15) (< (elt (send *ri* :hand-angle-vector :lhand) 0) -16.0))
      (format t "enough~%")
      (setq not_find_flag t)
      (setq diff 3))
    )
  (format t "diff ~A~%" diff)
  )

(defun rotate-chops (radi)
  (setq *hiro-coords* (send (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords) :pos))
  ;;(setq chop-coords (make-cascoords :pos (v- *hiro-coords* *chopstick-offset*)))
  (setq chop-coords (make-cascoords :pos (v- *hiro-coords* #f(-12.624 0 84.2388))))
  (send (send *hironxjsk* :larm :end-coords) :assoc chop-coords)
  (setq target-chop-coords (send chop-coords :copy-worldcoords))
  (send target-chop-coords :rotate radi :z :world)
  (send *hironxjsk* :larm :inverse-kinematics target-chop-coords :move-target chop-coords)
  (when (= radi (* -1 (/ pi 2)))
    (send *hironxjsk* :larm :move-end-pos #f(5 10 0) :world))
  (send-robot)
  )

(defun open-tongs (type)
  ;;type 0 -> small object
  ;;type 1 -> big object
  ;;type 2 -> トングの先が広がったポーズ
  (cond ((= type 0)
	 (send *hironxjsk* :hand-angle-vector :rhand #f(15.449 -15.449 -15.449 15.449)))
	((= type 1)
	 (send *hironxjsk* :hand-angle-vector :rhand #f(25.449 -25.449 -25.449 25.449)))
	((= type 2)
	 (send *hironxjsk* :hand-angle-vector :rhand #f(10 10 -10 -10))))
  (send-right-hand 2.0)
  )

(defun close-tongs ()
  (if (v= (send *hironxjsk* :hand-angle-vector :rhand) #f(10 10 -10 -10))
      (open-tongs 1))
  (setq close #f(-10 10 10 -10))
  (setq diff 0)
  (while (< diff 2.0)
    (setq prev_hand (send *ri* :hand-angle-vector :rhand))
    (send *hironxjsk* :hand-angle-vector :rhand (v+ prev_hand close))
    (send-right-hand 2.0)
    (setq cur_hand (send *ri* :hand-angle-vector :rhand))
    (setq diff (norm (v- (v- cur_hand prev_hand) close)))
    ;;(format t "diff ~A~%" diff)
    (when (< (elt (send *hironxjsk* :hand-angle-vector :rhand) 0) -16)
      (format t "enough~%")
      (setq diff 3))
    (send-right-hand 2.0)
    )
  (format t "diff ~A~%" diff)
  )

(defun rotate-tongs (radi)
  (format t "rotation ~A~%" (rad2deg radi))
  (setq *hiro-coords* (send (send (send *hironxjsk* :rarm :end-coords) :copy-worldcoords) :pos))
  ;;(setq tong-coords (make-cascoords :pos (v- (v- *hiro-coords* *tong-offset*) #f(-12.624 0 70))))
  (setq tong-coords (make-cascoords :pos (v- *hiro-coords* *tong-offset*)))
  (send (send *hironxjsk* :rarm :end-coords) :assoc tong-coords)
  (setq target-tong-coords (send tong-coords :copy-worldcoords))
  (send target-tong-coords :rotate radi :z :world)
  (send *hironxjsk* :rarm :inverse-kinematics target-tong-coords :move-target tong-coords)
  (send-robot)
  )

(defun sub-img (num)
  (cond ((= num 0)
	 (progn
	   (setq *bimg-msg* (one-shot-subscribe "/head_camera/rgb/image_raw"
						sensor_msgs::Image
						:after-stamp (ros::time-now)))
	   (send pub_status_msg :before *bimg-msg*)))
	((= num 1)
	 (progn
	   (setq *aimg-msg* (one-shot-subscribe "/head_camera/rgb/image_raw"
						sensor_msgs::Image
						:after-stamp (ros::time-now)))
	   (send pub_status_msg :after *aimg-msg*)))
	((= num 2)
	 (progn
	   (setq *eimg-msg* (one-shot-subscribe "/head_camera/rgb/image_raw"
						sensor_msgs::Image
						:after-stamp (ros::time-now))))
	 (send pub_status_msg :empty *eimg-msg*)))
  (send (send pub_status_msg :goal) :x 0)
  )

(defun pick-food (pos radi offset)
  ;;same pose 
  (setq *hiro-pose* (send (send *hironxjsk* :rarm :end-coords) :copy-worldcoords))
  (setq pos (v+ pos offset))
  (setq pos (v+ pos (float-vector 0 0 (- *catch-z* (elt pos 2))))) ;;set z *catch-z*
  (setq *move* (v- pos (send *hiro-pose* :pos)))
  (send *hiro-pose* :translate *move* :world)
  (send *hironxjsk* :rarm :inverse-kinematics *hiro-pose*)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 70) :world)
  (send-robot)
  ;;意図的調節
  (cond ((> radi 5)
	 (setq radi (- radi (/ (* 5 pi) 180))))
	((< radi -5)
	 (setq radi (+ radi (/ (* 5 pi) 180)))))
  ;;おかずに合わせたトングの回転
  (rotate-tongs radi)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 -70) :world)
  (send-robot)
  (close-tongs)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 70) :world)
  (send-robot)
  ;;元の向きに戻す
  (send target-tong-coords :rotate (* -1 radi) :z :world)
  (send *hironxjsk* :rarm :inverse-kinematics target-tong-coords :move-target tong-coords)
  (send-robot)
  )

(defun catch-retry (food-size move-vec)
  (open-chops (+ food-size OPEN_TH))
  (send *hironxjsk* :larm :move-end-pos move-vec :world)
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos (float-vector 0 0 (* -1 (elt move-vec 2))) :world)
  (send-robot)
  (close-chops)
  )

(defun roll_movement (offset_vec move_vec)
  ;;input example offset_vec (float-vector (* -1 (/ 3D_length 2) 0 0), move_vec (float-vector (- target_x cur_x) 0 0)
  (send *hironxjsk* :hand-angle-vector :lhand #f(-15.449 15.449 15.449 -15.449))
  (send-left-hand 2.0)
  (send *hironxjsk* :larm :move-end-pos offset_vec :world)
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos #f(0 0 -40) :world)
  (send-robot)
  (setq small_move (scale 10 (normalize-vector move_vec)))
  (while (>= (norm move_vec) 10)
    (send *hironxjsk* :larm :move-end-pos small_move :world)
    (send-robot)
    (setq move_vec (v- move_vec small_move)))
  (send *hironxjsk* :larm :move-end-pos move_vec :world)
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos #f(0 0 40) :world)
  (send-robot)
  )

(defun roll_tomato (diff_x diff_y 3D_width 3D_length target_x target_y)
  ;;pos GAでの座標 x->x, y->-y
  ;;おかずはお弁当箱の真ん中に置かれる
  (setq *hiro-pose* (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords))
  (setq start-pos (v+ lbox_pos (float-vector 0 0 (+ *G-z* 60))))
  (setq start-pos (v+ start-pos *chopstick-offset*))
  (setq *move* (v- start-pos (send *hiro-pose* :pos)))
  (send *hiro-pose* :translate *move* :world)
  (send *hironxjsk* :larm :inverse-kinematics *hiro-pose*)

  (send *hironxjsk* :larm :move-end-pos (float-vector diff_x diff_y 0) :world)
  (setq cur_hiro_coords (send (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords) :pos))
  (setq cur_chop_coords (v- cur_hiro_coords *chopstick-offset*))
  (setq move_x (float-vector (- target_x (elt cur_chop_coords 0)) 0 0))
  (setq move_y (float-vector 0 (- target_y (elt cur_chop_coords 1)) 0))
  ;;転がす
  (if (< (elt move_x 0) 0)
      (roll_movement (float-vector (+ (/ 3D_length 2) 10) 0 0) move_x)
    (roll_movement (float-vector (* -1 (+ (/ 3D_length 2) 10)) 0 0) move_x))
  (rotate-chops (* -1 (/ pi 2)))
  (if (< (elt move_y 1) 0)
      (roll_movement (float-vector 0 (+ (/ 3D_width 2) 10) 0) move_y)
    (roll_movement (float-vector 0 (* -1 (+ (/ 3D_width 2) 10)) 0) move_y))
  ;;プッシュ
  (place-init-pose)
  (send *hironxjsk* :hand-angle-vector :rhand #f(-10.449 10.449 10.449 -10.449))
  (send-right-hand 2.0)
  (setq *hiro-pose* (send (send *hironxjsk* :rarm :end-coords) :copy-worldcoords))
  (setq pos (float-vector target_x target_y 0))
  (setq pos (v+ pos (v+ #f(10 0 0) *tong-offset*)))
  (setq pos (v+ pos (float-vector 0 0 (- *catch-z* (elt pos 2)))))
  (setq *move* (v- pos (send *hiro-pose* :pos)))
  (send *hiro-pose* :translate *move* :world)
  (send *hironxjsk* :rarm :inverse-kinematics *hiro-pose*)
  (send *hironxjsk* :rarm :move-end-pos #f(20 0 55) :world)
  (send-robot)
  ;;push
  (if (> target_y (- (elt lbox_pos 1) 10))
      (place-in "tomato" #f(0 0 -25) -170)
    (progn
      (send *hironxjsk* :larm :move-end-pos #f(0 300 0) :world)
      (send *hironxjsk* :rarm :move-end-pos #f(-50 0 100) :world)
      (send-robot)
      (rotate-tongs pi)
      (send *hironxjsk* :rarm :move-end-pos #f(0 10 -35))
      (place-in "tomato" #f(0 0 -10) 170)
      (rotate-tongs (* -1 pi))))
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 60) :world)
  (send-robot)
  )

(defun place_tomato (pos food-size)
  (setq target_x (+ *front* (elt pos 0)))
  (setq target_y (- *left* (elt pos 1)))
  ;;トングで掴んだトマトをお箸で掴み直す
  (open-chops (+ (elt food-size 0) 30))
  (send *hironxjsk* :rarm :angle-vector #f(26.2101 -36.5776 -69.138 21.4993 30.4363 -109.8))
  (send-robot)
  (setq cur_width (send *ri* :hand-width :rhand))
  (if (< cur_width 15)
      (send *ri* :hand-width :rhand (+ cur_width 5)))
  (send *hironxjsk* :larm :angle-vector #f(-23.0357 -4.54163 -114.595 -28.9565 -8.97938 11.3799))
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos #f(7 5 0) :world)
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos #f(0 0 -85) :world)
  (send-robot)
  (close-chops)
  ;;(setq close-size (- (min (elt food-size 0) (elt food-size 1)) 15))
  ;;(send *ri* :hand-width :lhand close-size)
  (ros::duration-sleep 3.0)
  (setq cur_width (send *ri* :hand-width :rhand))
  (send *ri* :hand-width :rhand (- cur_width 10))
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 20) :world)
  (send-robot)
  (ros::duration-sleep 1.0)
  (open-tongs 0)
  (send *hironxjsk* :rarm :move-end-pos #f(0 -100 -20) :world)
  (send-robot)
  ;;お箸で詰める位置に運ぶ
  (setq cur_pos (send (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords) :pos))
  (setq cur_pos (v- cur_pos *chopstick-offset*))
  (setq move_x (- target_x (elt cur_pos 0)))
  (setq move_y (- target_y (elt cur_pos 1)))
  (send *hironxjsk* :larm :move-end-pos (float-vector move_x move_y 0) :world)
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos (float-vector 0 0 (- (+ *G-z* 30) (elt cur_pos 2))) :world)
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos #f(0 0 -10) :world)
  (send-robot)
  (open-chops (+ (elt food-size 0) 10))
  (send *hironxjsk* :larm :move-end-pos #f(0 100 50) :world)
  (send-robot)
  ;;落としてないかチェック
  (place-init-pose)
  (sub-img 1)
  (send (send pub_status_msg :header) :stamp (ros::time-now))
  (ros::subscribe "/get_placed_pos/output" hironx_tutorial::FoodPacking #'place_cb)
  (setq catch_flag nil)
  (until catch_flag
	 (ros::publish "/get_placed_pos/input" pub_status_msg)
	 (ros::spin-once)
	 (ros::sleep))
  (ros::unsubscribe "/get_placed_pos/output")
  (setq cur_x (+ (elt lbox_pos 0) diff_x))
  (setq cur_y (+ (elt lbox_pos 1) diff_y))
  (if (= 3D_width 0)
      (setq fail_catch_flag t)
    (if (substringp "overlap" approach)
	(if (and (<= (abs (- target_x cur_x)) 20) (<= (abs (- target_y cur_y)) 20))
	    (progn
	      ;;トングでプッシュ
	      (send *hironxjsk* :hand-angle-vector :rhand #f(-10.449 10.449 10.449 -10.449))
	      (send-right-hand 2.0)
	      (setq *hiro-pose* (send (send *hironxjsk* :rarm :end-coords) :copy-worldcoords))
	      (setq pos (float-vector target_x target_y 0))
	      (setq pos (v+ pos (v+ #f(10 0 0) *tong-offset*)))
	      (setq pos (v+ pos (float-vector 0 0 (- *catch-z* (elt pos 2)))))
	      (setq *move* (v- pos (send *hiro-pose* :pos)))
	      (send *hiro-pose* :translate *move* :world)
	      (send *hironxjsk* :rarm :inverse-kinematics *hiro-pose*)
	      (send *hironxjsk* :rarm :move-end-pos #f(20 0 55) :world)
	      (send-robot)
	      ;;push
	      (if (> target_y (- (elt lbox_pos 1) 10))
		  (place-in "tomato" #f(0 0 -25) -170)
		(progn
		  (send *hironxjsk* :larm :move-end-pos #f(0 50 0) :world)
		  (send *hironxjsk* :rarm :move-end-pos #f(-50 0 100) :world)
		  (send-robot)
		  (rotate-tongs pi)
		  (send *hironxjsk* :rarm :move-end-pos #f(0 10 -35))
		  (place-in "tomato" #f(0 0 -10) 170)
		  (rotate-tongs (* -1 pi)))
	      (send *hironxjsk* :rarm :move-end-pos #f(0 0 60) :world)
	      (send-robot))
	  (roll_tomato diff_x diff_y 3D_width 3D_length target_x target_y)))
    )
  )

(defun check-status (pos food-size)
  (place-init-pose)
  (sub-img 1)
  (setq target_x (+ *front* (elt pos 0)))
  (setq target_y (- *left* (elt pos 1)))
  ;;get_foods_info.l中の関数
  (sub-lbox-pos target_x target_y *G-z*)
  (send (send pub_status_msg :goal) :x (round lbox_x))
  (send (send pub_status_msg :goal) :y (round lbox_y))
  (send (send pub_status_msg :header) :stamp (ros::time-now))
  (ros::subscribe "/get_placed_pos/output" hironx_tutorial::FoodPacking #'place_cb)
  (setq catch_flag nil)
  (until catch_flag
	 (ros::publish "/get_placed_pos/input" pub_status_msg)
	 (ros::spin-once)
	 (ros::sleep))
  (ros::unsubscribe "/get_placed_pos/output")
  (pull_over pos diff_x diff_y 3D_width 3D_length food-size approach)
  )

(defun catch_target_rotated (diff_x diff_y 3D_width 3D_length target_x target_y approach)
  (rotate-chops (* -1 (/ pi 2)))
  (setq choice -1)
  (setq cur_hiro_coords (send (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords) :pos))
  (setq cur_chop_coords (v- cur_hiro_coords *chopstick-offset-r*))
  (setq cur_y (elt cur_chop_coords 1))
  (cond ((and (substringp "left" approach) (substringp "right" approach))
	 (if (> (- target_y cur_y) 0)
	     (setq choice 0)
	   (setq choice 1)))
	((substringp "right" approach)
	 (setq choice 0))
	((substringp "left" approach)
	 (setq choice 1))
	((and (substringp "top" approach) (substringp "bottom" approach))
	 (setq choice 2)))
  (cond ((= choice 0)
	 (send *hironxjsk* :larm :move-end-pos (float-vector 0 (* -1 (+ (/ 3D_width 2) 10)) 0) :world)
	 (send-robot)
	 (close-chops-absolute) ;;お弁当箱からはみ出さないように
	 (send *hironxjsk* :larm :move-end-pos #f(0 0 -70) :world)
	 (send-robot)
	 (open-chops (+ 3D_length OPEN_TH))
	 (send *hironxjsk* :larm :move-end-pos (float-vector 0 (+ (/ 3D_width 2) 10) 0) :world)
	 (send-robot))
	((= choice 1)
	 (send *hironxjsk* :larm :move-end-pos (float-vector 0 (+ (/ 3D_width 2) 10) 0) :world)
	 (send-robot)
	 (close-chops-absolute) ;;お弁当箱からはみ出さないように
	 (send *hironxjsk* :larm :move-end-pos #f(0 0 -70) :world)
	 (send-robot)
	 (open-chops (+ 3D_length OPEN_TH))
	 (send *hironxjsk* :larm :move-end-pos (float-vector 0 (* -1 (+ (/ 3D_width 2) 10)) 0) :world)
	 (send-robot))
	((= choice 2)
	 (send *hironxjsk* :larm :move-end-pos #f(0 0 -70) :world)
	 (send-robot)))
  (close-chops)
  (when not_find_flag
    (when (and (substringp "top" approach) (substringp "bottom" approach))
      (when (< (- target_y cur_y) 0)
	(catch-retry 3D_width #f(0 -10 50))
	(if not_find_flag
	    (catch-retry 3D_width #f(0 20 50))))
      (when (>= (- target_y cur_y) 0)
	(catch-retry 3D_width #f(0 10 50))
	(if not_find_flag
	    (catch-retry 3D_width #f(0 -20 50))))))
  )

(defun catch_target (diff_x diff_y 3D_width 3D_length target_x target_y approach)
  (setq choice -1)
  (setq cur_hiro_coords (send (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords) :pos))
  (setq cur_chop_coords (v- cur_hiro_coords *chopstick-offset*))
  (setq cur_x (elt cur_chop_coords 0))
  (cond ((and (substringp "top" approach) (substringp "bottom" approach))
	 (if (< (- target_x cur_x) 0)
	     (setq choice 0)
	   (setq choice 1)))
	((substringp "top" approach)
	 (setq choice 0))
	((substringp "bottom" approach)
	 (setq choice 1))
	((and (substringp "left" approach) (substringp "right" approach))
	 (setq choice 2)))
  (cond ((= choice 0)
	 (send *hironxjsk* :larm :move-end-pos (float-vector (+ (/ 3D_length 2) 10) 0 0) :world)
	 (send-robot)
	 (close-chops-absolute) ;;お弁当箱からはみ出ないように
	 (send *hironxjsk* :larm :move-end-pos #f(0 0 -75) :world)
	 (send-robot)
	 (open-chops (+ 3D_width OPEN_TH))
	 (send *hironxjsk* :larm :move-end-pos (float-vector (* -1 (+ (/ 3D_length 2) 10)) 0 0) :world)
	 (send-robot))
	((= choice 1)
	 (send *hironxjsk* :larm :move-end-pos (float-vector (* -1 (+ (/ 3D_length 2) 10)) 0 0) :world)
	 (send-robot)
	 (close-chops-absolute)
	 (send *hironxjsk* :larm :move-end-pos #f(0 0 -75) :world)
	 (send-robot)
	 (open-chops (+ 3D_width OPEN_TH))
	 (send *hironxjsk* :larm :move-end-pos (float-vector (+ (/ 3D_length 2) 10) 0 0) :world)
	 (send-robot))
	((= choice 2)
	 (send *hironxjsk* :larm :move-end-pos #f(0 0 -75) :world)
	 (send-robot)))
  (close-chops)
  (when not_find_flag
    (when (and (substringp "left" approach) (substringp "right" approach))
      (when (< (- target_x cur_x) 0)
	(catch-retry 3D_width #f(-10 0 50))
	(if not_find_flag
	    (catch-retry 3D_width #f(20 0 50))))
      (when (>= (- target_x cur_x) 0)
	(catch-retry 3D_width #f(10 0 50))
	(if not_find_flag
	    (catch-retry 3D_width #f(-20 0 50))))))
  )

(defun remove_overlap (diff_x diff_y 3D_width 3D_length target_x target_y approach)
  (format t "remove overlap~%")
  (rotate-chops (* -1 (/ pi 2)))
  (open-chops (- 3D_width 10))
  (when (< diff_y 0)
    (send *hironxjsk* :larm :move-end-pos (float-vector 0 (* -1 (+ (/ 3D_width 2) 5)) 0) :world)
    (send-robot)
    (if (substringp "right" approach)
	(send *hironxjsk* :larm :move-end-pos #f(0 0 -45) :world)
      (send *hironxjsk* :larm :move-end-pos #f(0 0 -35) :world))
    (send-robot)
    (send *hironxjsk* :larm :move-end-pos #f(0 40 0) :world)
    (send-robot)
    (send *hironxjsk* :larm :move-end-pos #f(0 0 45) :world)
    (send-robot))
  (when (>= diff_y 0)
    (send *hironxjsk* :larm :move-end-pos (float-vector 0 (+ (/ 3D_width 2) 5) 0) :world)
    (send-robot)
    (if (substringp "left" approach)
	(send *hironxjsk* :larm :move-end-pos #f(0 0 -45) :world)
      (send *hironxjsk* :larm :move-end-pos #f(0 0 -35) :world))
    (send-robot)
    (send *hironxjsk* :larm :move-end-pos #f(0 -40 0) :world)
    (send-robot)
    (send *hironxjsk* :larm :move-end-pos #f(0 0 45) :world)
    (send-robot))
  (place-init-pose)
  (sub-img 1)
  (send (send pub_status_msg :header) :stamp (ros::time-now))
  (ros::subscribe "/get_placed_pos/output" hironx_tutorial::FoodPacking #'place_cb)
  (setq catch_flag nil)
  (until catch_flag
	 (ros::publish "/get_placed_pos/input" pub_status_msg)
	 (ros::spin-once)
	 (ros::sleep))
  (ros::unsubscribe "/get_placed_pos/output")
  )

(defun arrange (diff_x diff_y 3D_width 3D_length approach distance)
  (format t "arrange target : distance~A~%" distance)
  (setq arrange_count 1)
  (when (and (substringp "right" approach) (> distance 0))
    (open-chops (- 3D_length 25))
    (rotate-chops (* -1 (/ pi 2)))
    (send *hironxjsk* :larm :move-end-pos (float-vector 0 (* -1 (+ (/ 3D_width 2) 5)) 0) :world)
    (send-robot)
    (send *hironxjsk* :larm :move-end-pos #f(0 0 -75) :world)
    (send-robot)
    (send *hironxjsk* :larm :move-end-pos (float-vector 0 (+ distance 20) 0) :world)
    (send-robot)
    (send *hironxjsk* :larm :move-end-pos #f(0 -10 0) :world)
    (send-robot)
    (send *hironxjsk* :larm :move-end-pos #f(0 0 75) :world)
    (send-robot))
  (when (and (substringp "left" approach) (< distance 0))
    (open-chops (- 3D_length 15))
    (rotate-chops (* -1 (/ pi 2)))
    (send *hironxjsk* :larm :move-end-pos (float-vector 0 (+ (/ 3D_width 2) 5) 0) :world)
    (send-robot)
    (send *hironxjsk* :larm :move-end-pos #f(0 0 -75) :world)
    (send-robot)
    (send *hironxjsk* :larm :move-end-pos (float-vector 0 (- distance 10) 0) :world)
    (send-robot)
    (send *hironxjsk* :larm :move-end-pos #f(0 10 0) :world)
    (send-robot)
    (send *hironxjsk* :larm :move-end-pos #f(0 0 75) :world)
    (send-robot))
  )

(defun pull_over (pos diff_x diff_y 3D_width 3D_length food-size approach)
  ;;pos GAでの座標 x->x, y->-y
  ;;おかずはお弁当箱の真ん中に置かれる
  (setq *hiro-pose* (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords))
  (setq start-pos (v+ lbox_pos (float-vector 0 0 (+ *G-z* 60))))
  (setq start-pos (v+ start-pos *chopstick-offset*))
  (setq *move* (v- start-pos (send *hiro-pose* :pos)))
  (send *hiro-pose* :translate *move* :world)
  (send *hironxjsk* :larm :inverse-kinematics *hiro-pose*)

  (setq pull_count (+ pull_count 1))
  (setq pull_flag nil)
  (setq rot_flag nil)

  (setq target_x (+ *front* (elt pos 0)))
  (setq target_y  (- *left* (elt pos 1)))
  (send *hironxjsk* :larm :move-end-pos (float-vector diff_x diff_y 0) :world)
  (setq cur_hiro_coords (send (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords) :pos))
  (setq cur_chop_coords (v- cur_hiro_coords *chopstick-offset*))
  (setq cur_x (elt cur_chop_coords 0))
  (setq cur_y (elt cur_chop_coords 1))
  (format t "distance to target ~A ~A~%" (abs (- target_x cur_x)) (abs (- target_y cur_y)))

  (if (= pull_count 1)
      (if (substringp "overlap" approach)
	  (progn
	    (remove_overlap diff_x diff_y 3D_width 3D_length target_x target_y approach)
	    (pull_over pos diff_x diff_y 3D_width 3D_length food-size approach))
	(setq pull_flag t))
    ;;２〜４回目でもまだ目標位置に達していなければ幅寄せする
    (if (and (or (> (abs (- target_x cur_x)) 15) (> (abs (- target_y cur_y)) 15)) (< pull_count 5))
	(setq pull_flag t))
    )
  (unless pull_flag
    ;;縦長な食材は整える
    (if (= arrange_count 0)
	(if (>= (/ (float (elt food-size 0)) (elt food-size 1)) 1.5)
	    (arrange diff_x diff_y 3D_width 3D_length approach (- target_y cur_y)))))
  (when pull_flag
    (if (and (<= (abs (- target_x cur_x)) 15) (< (/ (float (elt food-size 0)) (elt food-size 1)) 1.5))
	(setq rot_flag t))
    (send *hironxjsk* :larm :move-end-pos (scale -1 (float-vector diff_x diff_y 0)) :world)
    (send-robot)
    (setq flag nil)
    (if rot_flag
	(progn
	  (when  (or (or (substringp "left" approach) (substringp "right" approach))
		     (and (substringp "bottom" approach) (substringp "top" approach)))
	    (open-chops (+ 3D_length OPEN_TH))
	      (send *hironxjsk* :larm :move-end-pos (float-vector diff_x diff_y 0) :world)
	      (catch_target_rotated diff_x diff_y 3D_width 3D_length target_x target_y approach)
	      (setq flag t)))
      (progn
	(when (or (or (substringp "top" approach) (substringp "bottom" approach))
		  (and (substringp "left" approach) (substringp "right" approach)))
	  (open-chops (+ 3D_width OPEN_TH))
	  (send *hironxjsk* :larm :move-end-pos (float-vector diff_x diff_y 0) :world)
	  (catch_target diff_x diff_y 3D_width 3D_length target_x target_y approach)
	  (setq flag t))))
    (when flag
      ;;ここから幅寄せ
      (setq cur_hiro_coords (send (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords) :pos))
      (if rot_flag
	  ;;#f(-25.065 34.9855 84.2388)
	  (setq cur_chop_coords (v- cur_hiro_coords #f(0 40 84.2388)));;*chopstick-offset-r*))
	(setq cur_chop_coords (v- cur_hiro_coords *chopstick-offset*)))
      (setq cur_x (elt cur_chop_coords 0))
      (setq cur_y (elt cur_chop_coords 1))
      (format t "target_x ~A cur_x ~A~%" target_x cur_x)
      (format t "target_y ~A cur_y ~A~%" target_y cur_y)
      (send *hironxjsk* :larm :move-end-pos (float-vector (- target_x cur_x) 0 0) :world)
      (send-robot)
      (send *hironxjsk* :larm :move-end-pos (float-vector 0 (- target_y cur_y) 0) :world)
      (send-robot)
      ;;open chops
      (send *hironxjsk* :hand-angle-vector :lhand (v+ (send *ri* :hand-angle-vector :lhand) #f(8 -8 -8 8)))
      (send-left-hand 2.0)
      ;;一旦引く
      (if rot_flag
	  (if (> (- target_y cur_y) 0)
	      (send *hironxjsk* :larm :move-end-pos #f(0 -10 0) :world)
	    (send *hironxjsk* :larm :move-end-pos #f(0 10 0) :world))
	(if (> (- target_x cur_x) 0)
	    (send *hironxjsk* :larm :move-end-pos #f(-10 0 0) :world)
	    (send *hironxjsk* :larm :move-end-pos #f(10 0 0) :world))
	)
      (send-robot)
      (send *hironxjsk* :larm :move-end-pos #f(0 0 70) :world)
      (send-robot)
      (if rot_flag
	  (open-chops (+ 3D_length OPEN_TH))
	(open-chops (+ 3D_width OPEN_TH)))
      (check-status pos food-size)
      )
    )
  )

(defun place-in (name down_vec degree)
  ;;傾ける
  (setq *hiro-coords* (send (send (send *hironxjsk* :rarm :end-coords) :copy-worldcoords) :pos))
  (setq tong-coords (make-cascoords :pos (v- *hiro-coords* *tong-offset*)))
  (send (send *hironxjsk* :rarm :end-coords) :assoc tong-coords)
  (setq target-tong-coords (send tong-coords :copy-worldcoords))
  (send target-tong-coords :rotate degree :x :world)
  (send *hironxjsk* :rarm :inverse-kinematics target-tong-coords :move-target tong-coords)
  ;;(send *hironxjsk* :rarm :move-end-pos #f(-10 0 0) :world)
  (send-robot)
  (send *hironxjsk* :rarm :move-end-pos down_vec :world)
  (send-robot)
  (when (not (string= name "tomato"))
    ;;open-hand
    (setq cur_hand (send *ri* :hand-angle-vector :rhand))
    (send *hironxjsk* :hand-angle-vector :rhand (v+ cur_hand #f(15 -15 -15 15)))
    (send-right-hand 2.0))
  (if (string= name "tomato")
      (ros::duration-sleep 1.0))
  (send *hironxjsk* :rarm :move-end-pos (scale -1 down_vec) :world)
  (send-robot)
  (when (string= name "tomato")
    (send *hironxjsk* :hand-angle-vector :rhand (v+ cur_hand #f(10 -10 -10 10)))
    (send-right-hand 2.0)
    (send *hironxjsk* :rarm :move-end-pos down_vec :world)
    (send-robot)
    (send *hironxjsk* :rarm :move-end-pos (scale -1 down_vec) :world)
    (send-robot))
  ;;元に戻す
  (send target-tong-coords :rotate (* -1 degree) :x :world)
  (send *hironxjsk* :rarm :inverse-kinematics target-tong-coords :move-target tong-coords)
  (send-robot)
  )

(defun place_cb (msg)
  (setq diff_2D_x (send msg :x))
  (setq diff_2D_y (send msg :y))
  (setq 2D_width (send msg :width))
  (setq 2D_height (send msg :height))
  (setq approach (send msg :direction))
  (if (= 2D_width 0)
      (setq 3D_width 0)
    (setq 3D_width (* (/ (+ 2D_width 5) lbox_length) *length*)))
  (setq 3D_length (* (/ (+ 2D_height 5) lbox_length) *length*))
  (setq diff_x (* (/ (* -1 diff_2D_y) lbox_length) *length*))
  (setq diff_y (* (/ (* -1 diff_2D_x) lbox_length) *length*))
  (format t "diff_x ~A diff_y ~A 3D_width ~A 3D_length ~A approach ~A~%" diff_x diff_y 3D_width 3D_length approach)
  (setq catch_flag t)
  )
  
(defun place-food (pos name food-size)
  ;;same pose
  (setq *hiro-pose* (send (send *hironxjsk* :rarm :end-coords) :copy-worldcoords))
  (setq goal (float-vector (elt pos 0) (* (elt pos 1) -1) (elt pos 2)))
  (setq goal (v+ pos (float-vector *front* *left* 0))) ;;*coords*<-lunchbox pos
  ;;お弁当箱の真ん中に入れてから幅寄せする
  (setq lbox_pos (float-vector (/ (+ *front* back) 2) (/ (+ *left* right) 2) 0))
  ;;(setq lpos (v+ lbox_pos *tong-offset*))
  (setq lpos (v+ lbox_pos (v+ *tong-offset* #f(25 15 0)))) ;;tong offset
  (setq lpos (v+ lpos (float-vector 0 0 (- *catch-z* (elt lpos 2))))) ;;set z *catch-z*
  (setq *move* (v- lpos (send *hiro-pose* :pos)))
  (send *hiro-pose* :translate *move* :world)
  (send *hironxjsk* :rarm :inverse-kinematics *hiro-pose*)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 80) :world)
  (send-robot)
  (place-in name #f(0 5 -45) -170)
  ;;手をよけて置かれた位置を認識する
  (send *hironxjsk* :rarm :move-end-pos #f(0 -200 0) :world)
  (send-robot)
  (sub-img 1)
  (send (send pub_status_msg :header) :stamp (ros::time-now))
  (ros::subscribe "/get_placed_pos/output" hironx_tutorial::FoodPacking #'place_cb)
  (setq catch_flag nil)
  (until catch_flag
	 (ros::publish "/get_placed_pos/input" pub_status_msg)
	 (ros::spin-once)
	 (ros::sleep))
  (ros::unsubscribe "/get_placed_pos/output")
  (if (not (= 3D_width 0))
      (pull_over pos diff_x diff_y 3D_width 3D_length food-size approach)
    (setq fail_catch_flag t))
  (place-init-pose)
  )

(defun catch_and_place_main()
  (setq *tong-offset* #f(-20.23 -114.702 90.2251))
  (setq *chopstick-offset* #f(-12.624 18.437 84.2388))
  (setq *chopstick-offset-r* #f(-25.065 34.9855 84.2388)) ;;100.135))
  (format t "- - - CATCH AND PLACE - - -~%")
  (place-init-pose)
  (pub-lbox-coords)
  (sub-img 2)
  (dotimes (i (length order_list))
    (setq num (elt order_list i))
    (format t "num : ~A~%" num)
    (when (> (elt (elt place_list num) 0) 0)
      (setq target_name (elt name_list num))
      (setq food-size (elt box_list num))
      (format t "target : ~A~%" target_name)
      (format t "size : ~A place : ~A~%" food-size (elt place_list num))
      (if (or (> (elt food-size 0) 50) (> (elt food-size 1) 50))
	  (progn
	    (if (or (> (elt food-size 0) 60) (> (elt food-size 1) 60))
		(open-tongs 2)
	      (open-tongs 1)))
	(open-tongs 0))
      (sub-img 0)
      (if (= (elt radi_list num) 0)
	  ;;(setq offset (v+ *tong-offset* #f(5 0 0))) ;;tong offset
	  (setq offset *tong-offset*)
	(setq offset (v+ *tong-offset* #f(0 15 0))) ;;内側め
	)
      (setq fail_catch_flag nil)
      (pick-food (elt pos_list num) (elt radi_list num) offset)
      (setq pull_count 0)
      (setq arrange_count 0)
      (if (string= target_name "tomato")
	  (place_tomato (elt place_list num) food-size)
	(place-food (elt place_list num) target_name food-size))
      (setq retry_count 0)
      (while fail_catch_flag
	;; retry to catch
	(setq retry_count (+ retry_count 1))
	(if (= retry_count 1)
	    (setq offset (v+ offset #f(0 0 -5)))
	  (if (= retry_count 2)
	      (setq offset (v+ offset #f(0 0 10)))))
	(setq fail_catch_flag nil)
	(if (or (> (elt food-size 0) 50) (> (elt food-size 1) 50))
	    (progn
	      (if (or (> (elt food-size 0) 60) (> (elt food-size 1) 60))
		  (open-tongs 2)
		(open-tongs 1)))
	  (open-tongs 0))
	(pick-food (elt pos_list num) (elt radi_list num) offset)
	(if (string= target_name "tomato")
	    (place_tomato (elt place_list num) food-size)
	  (place-food (elt place_list num) target_name food-size)))
      )
    )
  )

;;#f(-110.25 9.0407 64.6251) hand-pos - real-pos(rarm)
;;tong(rotate 90)
;;#f(-39.159 -114.508 100.161)

;;11/25トング逆向きにした
;;#f(-22.0 -114.0 100.161)

;;指の開き方
;;#f(-15.449 15.449 15.449 -15.449)) -> 2cm
;;#f(0 0 0 0) -> 4.3cm
;;#f(15.449 -15.449 -15.449 15.449) -> 6.4cm
