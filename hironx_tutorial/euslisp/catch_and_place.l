#!/usr/bin/env roseus

(ros::roseus-add-msgs "hironx_tutorial")
(ros::advertise "/get_placed_pos/input" hironx_tutorial::LunchBoxStatus 1)
(setq pub_status_msg (instance hironx_tutorial::LunchBoxStatus :init))
(setq OPEN_TH 15)

(defun place-init-pose ()
  (send *hironxjsk* :reset-manip-pose)
  (send *hironxjsk* :larm_joint4 :joint-angle -35)
  (send *hironxjsk* :larm :move-end-pos #f(0 0 100) :world)
  (send *hironxjsk* :rarm :move-end-pos #f(50 0 150) :world)
  (send *hironxjsk* :rarm_joint5 :joint-angle -75)
  (send *hironxjsk* :rarm_joint3 :joint-angle 35)
  (send *hironxjsk* :rarm_joint4 :joint-angle 48)
  (look-73b2-table)
  (send *hironxjsk* :larm :move-end-pos #f(0 160 0) :world)
  (send-robot)
  )

(defun pub-lbox-coords ()
  (send (send pub_status_msg :ltop) :x (elt ltop 0))
  (send (send pub_status_msg :ltop) :y (elt ltop 1))
  (send (send pub_status_msg :lbottom) :x (elt lbottom 0))
  (send (send pub_status_msg :lbottom) :y (elt lbottom 1))
  (send (send pub_status_msg :rtop) :x (elt rtop 0))
  (send (send pub_status_msg :rtop) :y (elt rtop 1))
  (send (send pub_status_msg :rbottom) :x (elt rbottom 0))
  (send (send pub_status_msg :rbottom) :y (elt rbottom 1))
  )

(defun open-chops (size)
  (setq size_zero #f(-30.449 30.449 30.449 -30.449))
  (setq size_23 #f(15.449 -15.449 -15.449 15.449))
  (setq plus (scale (/ size 23.0) size_23))
  (setq target_hand (v+ size_zero plus))
  (send *hironxjsk* :hand-angle-vector :lhand target_hand)
  (send-left-hand 2.0)
  )

(defun close-chops-absolute ()
  (send *hironxjsk* :hand-angle-vector :lhand #f(-25.449 25.449 25.449 -25.449))
  (send-left-hand 2.0)
  )

(defun close-chops ()
  (setq not_find_flag nil)
  (setq close #f(-5 5 5 -5))
  (setq diff 0)
  (while (< diff 2.15)
    (setq prev_hand (send *ri* :hand-angle-vector :lhand))
    (send *hironxjsk* :hand-angle-vector :lhand (v+ prev_hand close))
    (send-left-hand 2.0)
    (setq cur_hand (send *ri* :hand-angle-vector :lhand))
    (setq diff (norm (v- (v- cur_hand prev_hand) close)))
    (format t "diff ~A~%" diff)
    (when (and (< diff 2.15) (< (elt (send *ri* :hand-angle-vector :lhand) 0) -16.0))
      (format t "enough~%")
      (setq not_find_flag t)
      (setq diff 3))
    )
  (format t "diff ~A~%" diff)
  )

(defun rotate-chops (radi)
  (setq *hiro-coords* (send (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords) :pos))
  ;;(setq chop-coords (make-cascoords :pos (v- *hiro-coords* *chopstick-offset*)))
  (setq chop-coords (make-cascoords :pos (v- *hiro-coords* #f(0.0 0.0 84.2388))))
  (send (send *hironxjsk* :larm :end-coords) :assoc chop-coords)
  (setq target-chop-coords (send chop-coords :copy-worldcoords))
  (send target-chop-coords :rotate radi :z :world)
  (send *hironxjsk* :larm :inverse-kinematics target-chop-coords :move-target chop-coords)
  (send-robot)
  )

(defun open-tongs (type)
  ;;type 0 -> small object
  ;;type 1 -> big object
  ;;type 2 -> トングの先が広がったポーズ
  (cond ((= type 0)
	 (send *hironxjsk* :hand-angle-vector :rhand #f(15.449 -15.449 -15.449 15.449)))
	((= type 1)
	 (send *hironxjsk* :hand-angle-vector :rhand #f(25.449 -25.449 -25.449 25.449)))
	((= type 2)
	 (send *hironxjsk* :hand-angle-vector :rhand #f(10 10 -10 -10))))
  (send-right-hand 2.0)
  )

(defun close-tongs ()
  (if (v= (send *hironxjsk* :hand-angle-vector :rhand) #f(10 10 -10 -10))
      (open-tongs 1))
  (setq close #f(-10 10 10 -10))
  (setq diff 0)
  (while (< diff 2.0)
    (setq prev_hand (send *ri* :hand-angle-vector :rhand))
    (send *hironxjsk* :hand-angle-vector :rhand (v+ prev_hand close))
    (send-right-hand 2.0)
    (setq cur_hand (send *ri* :hand-angle-vector :rhand))
    (setq diff (norm (v- (v- cur_hand prev_hand) close)))
    ;;(format t "diff ~A~%" diff)
    (when (< (elt (send *hironxjsk* :hand-angle-vector :rhand) 0) -16)
      (format t "enough~%")
      (setq diff 3))
    (send-right-hand 2.0)
    )
  (format t "diff ~A~%" diff)
  )

(defun rotate-tongs (radi)
  (format t "rotation ~A~%" (rad2deg radi))
  (setq *hiro-coords* (send (send (send *hironxjsk* :rarm :end-coords) :copy-worldcoords) :pos))
  ;;(setq tong-coords (make-cascoords :pos (v- (v- *hiro-coords* *tong-offset*) #f(-12.624 0 70))))
  (setq tong-coords (make-cascoords :pos (v- *hiro-coords* *tong-offset*)))
  (send (send *hironxjsk* :rarm :end-coords) :assoc tong-coords)
  (setq target-tong-coords (send tong-coords :copy-worldcoords))
  (send target-tong-coords :rotate radi :z :world)
  (send *hironxjsk* :rarm :inverse-kinematics target-tong-coords :move-target tong-coords)
  (send-robot)
  )

(defun sub-img (num)
  (cond ((= num 0)
	 (progn
	   (setq *bimg-msg* (one-shot-subscribe "/head_camera/rgb/image_raw"
						sensor_msgs::Image
						:after-stamp (ros::time-now)))
	   (send pub_status_msg :before *bimg-msg*)))
	((= num 1)
	 (progn
	   (setq *aimg-msg* (one-shot-subscribe "/head_camera/rgb/image_raw"
						sensor_msgs::Image
						:after-stamp (ros::time-now)))
	   (send pub_status_msg :after *aimg-msg*)))
	((= num 2)
	 (progn
	   (setq *eimg-msg* (one-shot-subscribe "/head_camera/rgb/image_raw"
						sensor_msgs::Image
						:after-stamp (ros::time-now))))
	 (send pub_status_msg :empty *eimg-msg*)))
  )

(defun catch-food (pos radi offset)
  ;;same pose 
  (setq *hiro-pose* (send (send *hironxjsk* :rarm :end-coords) :copy-worldcoords))
  (setq pos (v+ pos offset))
  (setq pos (v+ pos (float-vector 0 0 (- *catch-z* (elt pos 2))))) ;;set z *catch-z*
  (setq *move* (v- pos (send *hiro-pose* :pos)))
  (send *hiro-pose* :translate *move* :world)
  (send *hironxjsk* :rarm :inverse-kinematics *hiro-pose*)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 70) :world)
  (send-robot)
  ;;意図的調節
  (cond ((> radi 5)
	 (setq radi (- radi (/ (* 5 pi) 180))))
	((< radi -5)
	 (setq radi (+ radi (/ (* 5 pi) 180)))))
  ;;おかずに合わせたトングの回転
  (rotate-tongs radi)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 -70) :world)
  (send-robot)
  (close-tongs)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 70) :world)
  (send-robot)
  ;;元の向きに戻す
  (send target-tong-coords :rotate (* -1 radi) :z :world)
  (send *hironxjsk* :rarm :inverse-kinematics target-tong-coords :move-target tong-coords)
  (send-robot)
  )

(defun catch-retry (food-size move-vec)
  (open-chops (+ food-size OPEN_TH))
  (send *hironxjsk* :larm :move-end-pos move-vec :world)
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos (float-vector 0 0 (* -1 (elt move-vec 2))) :world)
  (send-robot)
  (close-chops)
  )

(defun place_tomato (pos food-size)
  (setq target_x (+ *front* (elt pos 0)))
  (setq target_y (- *left* (elt pos 1)))
  ;;トングで掴んだトマトをお箸で掴み直す
  (open-chops (+ (elt food-size 0) 30))
  (send *hironxjsk* :rarm :angle-vector #f(26.2101 -36.5776 -69.138 21.4993 30.4363 -109.8))
  (send-robot)
  (setq cur_width (send *ri* :hand-width :rhand))
  (if (< cur_width 15)
      (send *ri* :hand-width :rhand (+ cur_width 5)))
  (send *hironxjsk* :larm :angle-vector #f(-23.0357 -4.54163 -114.595 -28.9565 -8.97938 11.3799))
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos #f(10 10 0) :world)
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos #f(0 0 -80) :world)
  (send-robot)
  (close-chops)
  ;;(setq close-size (- (min (elt food-size 0) (elt food-size 1)) 15))
  ;;(send *ri* :hand-width :lhand close-size)
   (ros::duration-sleep 3.0)
  (setq cur_width (send *ri* :hand-width :rhand))
  (send *ri* :hand-width :rhand (- cur_width 5))
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 20) :world)
  (send-robot)
  (ros::duration-sleep 1.0)
  (open-tongs 0)
  (send *hironxjsk* :rarm :move-end-pos #f(0 -100 -20) :world)
  (send-robot)
  ;;お箸で詰める位置に運ぶ
  (setq cur_pos (send (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords) :pos))
  (setq cur_pos (v- cur_pos *chopstick-offset*))
  (setq move_x (- target_x (elt cur_pos 0)))
  (setq move_y (- target_y (elt cur_pos 1)))
  (send *hironxjsk* :larm :move-end-pos (float-vector move_x move_y 0) :world)
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos (float-vector 0 0 (- (+ *G-z* 30) (elt cur_pos 2))) :world)
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos #f(0 0 -10) :world)
  (send-robot)
  (open-chops (+ (elt food-size 0) 10))
  (send *hironxjsk* :larm :move-end-pos #f(0 100 50) :world)
  (send-robot)
  ;;トングでプッシュ
  (send *hironxjsk* :hand-angle-vector :rhand #f(-10.449 10.449 10.449 -10.449))
  (send-right-hand 2.0)
  (setq *hiro-pose* (send (send *hironxjsk* :rarm :end-coords) :copy-worldcoords))
  (setq pos (float-vector target_x target_y 0))
  (setq pos (v+ pos (v+ #f(10 0 0) *tong-offset*)))
  (setq pos (v+ pos (float-vector 0 0 (- *catch-z* (elt pos 2)))))
  (setq *move* (v- pos (send *hiro-pose* :pos)))
  (send *hiro-pose* :translate *move* :world)
  (send *hironxjsk* :rarm :inverse-kinematics *hiro-pose*)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 55) :world)
  (send-robot)
  ;;push
  (place-in "tomato" #f(0 0 -15))
  (place-init-pose)
  )

(defun move_to_target (diff_x diff_y 3D_width 3D_length 3D_height target_x target_y approach)
  (setq choice -1)
  (setq cur_hiro_coords (send (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords) :pos))
  (setq cur_chop_coords (v- cur_hiro_coords *chopstick-offset*))
  (setq cur_x (elt cur_chop_coords 0))
  (cond ((and (substringp "top" approach) (substringp "bottom" approach))
	 (if (< (- target_x cur_x) 0)
	     (setq choice 0)
	   (setq choice 1)))
	((substringp "top" approach)
	 (setq choice 0))
	((substringp "bottom" approach)
	 (setq choice 1))
	((and (substringp "left" approach) (substringp "right" approach))
	 (setq choice 2)))
  (cond ((= choice 0)
	 (send *hironxjsk* :larm :move-end-pos (float-vector (+ (/ 3D_length 2) 5) 0 0) :world)
	 (send-robot)
	 (close-chops-absolute) ;;お弁当箱からはみ出ないように
	 (send *hironxjsk* :larm :move-end-pos #f(0 0 -75) :world)
	 (send-robot)
	 (open-chops (+ 3D_width OPEN_TH))
	 (send *hironxjsk* :larm :move-end-pos (float-vector (* -1 (+ (/ 3D_length 2) 5)) 0 0) :world)
	 (send-robot)
	 (when (and (substringp "left" approach) (substringp "right" approach))
	   (send *hironxjsk* :larm :move-end-pos #f(-5 0 50) :world)
	   (send-robot)
	   (send *hironxjsk* :larm :move-end-pos #f(0 0 -50) :world)
	   (send-robot)))
	((= choice 1)
	 (send *hironxjsk* :larm :move-end-pos (float-vector (* -1 (+ (/ 3D_length 2) 5)) 0 0) :world)
	 (send-robot)
	 (close-chops-absolute)
	 (send *hironxjsk* :larm :move-end-pos #f(0 0 -75) :world)
	 (send-robot)
	 (open-chops (+ 3D_width OPEN_TH))
	 (send *hironxjsk* :larm :move-end-pos (float-vector (+ (/ 3D_length 2) 5) 0 0) :world)
	 (send-robot)
	 (when (and (substringp "left" approach) (substringp "right" approach))
	   (send *hironxjsk* :larm :move-end-pos #f(5 0 50) :world)
	   (send-robot)
	   (send *hironxjsk* :larm :move-end-pos #f(0 0 -50) :world)
	   (send-robot)))
	((= choice 2)
	 (send *hironxjsk* :larm :move-end-pos #f(0 0 -75) :world)
	 (send-robot)))
  (close-chops)
  (when not_find_flag
    (when (and (substringp "left" approach) (substringp "right" approach))
      (catch-retry 3D_width #f(10 0 50))
      (if not_find_flag
	  (catch-retry 3D_width #f(-20 0 50)))))
  )

(defun pull_over (name pos lbox_pos diff_2D_x diff_2D_y 3D_width 3D_length 3D_height approach)
  ;;おかずの大きさに合わせて開く
  (open-chops (+ 3D_width OPEN_TH))
  ;;pos GAでの座標 x->x, y->-y
  ;;おかずはお弁当箱の真ん中に置かれる
  (setq target_x (+ *front* (elt pos 0)))
  (setq target_y  (- *left* (elt pos 1)))
  (setq center_x (/ *length* 2))
  (setq center_y (/ *width* 2))
  (setq size_x (elt food-size 0))
  (setq size_y (elt food-size 1))
  ;;置く時にずれた分
  (setq diff_x (* (/ (* -1 diff_2D_y) lbox_length) *length*))
  (setq diff_y (* (/ (* -1 diff_2D_x) lbox_length) *length*))
  (setq center_x (+ center_x diff_x))
  (setq center_y (+ center_y diff_y))
  (format t "from ~A diff_x diff_y ~A ~A~%" approach diff_x diff_y)
 
  (setq *hiro-pose* (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords))
  (setq start-pos (v+ lbox_pos (float-vector 0 0 (+ *G-z* 60))))
  (setq start-pos (v+ start-pos *chopstick-offset*))
  (setq *move* (v- start-pos (send *hiro-pose* :pos)))
  (send *hiro-pose* :translate *move* :world)
  (send *hironxjsk* :larm :inverse-kinematics *hiro-pose*)
  (send-robot)	   
  (when (or (or (substringp "top" approach) (substringp "bottom" approach))
	    (and (substringp "left" approach) (substringp "right" approach)))
    (open-chops (+ 3D_width OPEN_TH))
    (send *hironxjsk* :larm :move-end-pos (float-vector diff_x diff_y 0) :world)
    (move_to_target diff_x diff_y 3D_width 3D_length 3D_height target_x target_y approach)
    ;;ここから幅寄せ
    (setq cur_hiro_coords (send (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords) :pos))
    (setq cur_chop_coords (v- cur_hiro_coords *chopstick-offset*))
    (setq cur_x (elt cur_chop_coords 0))
    (setq cur_y (elt cur_chop_coords 1))
    (format t "target_x ~A cur_x ~A~%" target_x cur_x)
    (format t "target_y ~A cur_y ~A~%" target_y cur_y)
    (send *hironxjsk* :larm :move-end-pos (float-vector (- target_x cur_x) 0 0) :world)
    (send-robot)
    (send *hironxjsk* :larm :move-end-pos (float-vector 0 (- target_y cur_y) 0) :world)
    (send-robot)
    ;;open chops
    (send *hironxjsk* :hand-angle-vector :lhand (v+ (send *ri* :hand-angle-vector :lhand) #f(5 -5 -5 5)))
    (send-left-hand 2.0)
    (send *hironxjsk* :larm :move-end-pos #f(0 0 70) :world)
    (send-robot)
    (open-chops (+ 3D_width OPEN_TH)))
  )

(defun drag ()
  (setq cur_hand (send *ri* :hand-angle-vector :rhand))
  (send *hironxjsk* :hand-angle-vector :rhand (v+ cur_hand #f(15 -15 -15 15)))
  (send-right-hand 2.0)
  ;;他のおかずに乗っかっている時
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 10) :world)
  (send-robot)
  (send *hironxjsk* :hand-angle-vector :rhand (v+ cur_hand #f(5 -5 -5 5)))
  (send-right-hand 2.0)
  (send *hironxjsk* :rarm :move-end-pos #f(0 -20 0) :world)
  (send-robot)
  (send *hironxjsk* :hand-angle-vector :rhand (v+ cur_hand #f(15 -15 -15 15)))
  (send-right-hand 2.0)
  )

(defun place-in (name down_vec)
  ;;傾ける
  (setq *hiro-coords* (send (send (send *hironxjsk* :rarm :end-coords) :copy-worldcoords) :pos))
  (setq tong-coords (make-cascoords :pos (v- *hiro-coords* *tong-offset*)))
  (send (send *hironxjsk* :rarm :end-coords) :assoc tong-coords)
  (setq target-tong-coords (send tong-coords :copy-worldcoords))
  (send target-tong-coords :rotate -170 :x :world)
  (send *hironxjsk* :rarm :inverse-kinematics target-tong-coords :move-target tong-coords)
  ;;(send *hironxjsk* :rarm :move-end-pos #f(-10 0 0) :world)
  (send-robot)
  (send *hironxjsk* :rarm :move-end-pos down_vec :world)
  (send-robot)
  ;;おかずが重ならないように置く
  (unless (string= name "tomato")
    (drag))
  (send *hironxjsk* :rarm :move-end-pos (scale -1 down_vec) :world)
  (send-robot)
  ;;元に戻す
  (send target-tong-coords :rotate 170 :x :world)
  (send *hironxjsk* :rarm :inverse-kinematics target-tong-coords :move-target tong-coords)
  (send-robot)
  )

(defun place_cb (msg)
  (setq diff_2D_x (send msg :x))
  (setq diff_2D_y (send msg :y))
  (if (= (send msg :width) 0)
      (progn
	(setq 3D_y_size 0.0)
	(setq 3D_x_size 0.0))
    (progn
      (setq 3D_y_size (* (/ (+ (send msg :width) 5) lbox_length) *length*))
      (setq 3D_x_size (* (/ (+ (send msg :height) 5) lbox_length) *length*))))
  (setq approach (send msg :direction))
  (format t "diff_2D_X ~A diff_2D_y ~A 3D_y_size ~A 3D_x_size ~A approach ~A~%" diff_2D_x diff_2D_y 3D_y_size 3D_x_size approach)
  (setq catch_flag t)
  )
  
(defun place-food (pos name food-size)
  ;;same pose
  (setq *hiro-pose* (send (send *hironxjsk* :rarm :end-coords) :copy-worldcoords))
  (setq goal (float-vector (elt pos 0) (* (elt pos 1) -1) (elt pos 2)))
  (setq goal (v+ pos (float-vector *front* *left* 0))) ;;*coords*<-lunchbox pos
  ;;お弁当箱の真ん中に入れてから幅寄せする
  (setq lbox_pos (float-vector (/ (+ *front* back) 2) (/ (+ *left* right) 2) 0))
  ;;(setq lpos (v+ lbox_pos *tong-offset*))
  (setq lpos (v+ lbox_pos (v+ *tong-offset* #f(25 15 0)))) ;;tong offset
  (setq lpos (v+ lpos (float-vector 0 0 (- *catch-z* (elt lpos 2))))) ;;set z *catch-z*
  (setq *move* (v- lpos (send *hiro-pose* :pos)))
  (send *hiro-pose* :translate *move* :world)
  (send *hironxjsk* :rarm :inverse-kinematics *hiro-pose*)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 80) :world)
  (send-robot)
  (place-in name #f(0 0 -45))
  ;;手をよけて置かれた位置を認識する
  (send *hironxjsk* :rarm :move-end-pos #f(0 -200 0) :world)
  (send-robot)
  (sub-img 1)
  (send (send pub_status_msg :header) :stamp (ros::time-now))
  (ros::subscribe "/get_placed_pos/output" hironx_tutorial::FoodPacking #'place_cb)
  (setq catch_flag nil)
  (until catch_flag
	 (ros::publish "/get_placed_pos/input" pub_status_msg)
	 (ros::spin-once)
	 (ros::sleep))
  (ros::unsubscribe "/get_placed_pos/output")
  ;;(format t "diff_x diff_y ~A ~A~%" diff_2D_x diff_2D_y)
  (if (not (= 3D_x_size 0))
      (pull_over name pos lbox_pos diff_2D_x diff_2D_y 3D_y_size 3D_x_size (elt food-size 2) approach)
    (setq fail_catch_flag t))
  (place-init-pose)
  )

(defun catch_and_place_main()
  (setq *tong-offset* #f(-20.23 -114.702 90.2251))
  (setq *chopstick-offset* #f(-12.624 18.437 84.2388))
  (format t "- - - CATCH AND PLACE - - -~%")
  (place-init-pose)
  (pub-lbox-coords)
  (sub-img 2)
  (dotimes (i (length order_list))
    (setq num (elt order_list i))
    (format t "num : ~A~%" num)
    (when (> (elt (elt place_list num) 0) 0)
      (setq target_name (elt name_list num))
      (setq food-size (elt box_list num))
      (format t "target : ~A~%" target_name)
      (format t "size : ~A place : ~A~%" food-size (elt place_list num))
      (if (or (> (elt food-size 0) 50) (> (elt food-size 1) 50))
	  (progn
	    (if (or (> (elt food-size 0) 60) (> (elt food-size 1) 60))
		(open-tongs 2)
	      (open-tongs 1)))
	(open-tongs 0))
      (sub-img 0)
      (if (= (elt radi_list num) 0)
	  ;;(setq offset (v+ *tong-offset* #f(10 0 0))) ;;tong offset
	  (setq offset *tong-offset*)
	(setq offset (v+ *tong-offset* #f(0 15 0))) ;;内側め
	)
      (setq fail_catch_flag nil)
      (catch-food (elt pos_list num) (elt radi_list num) offset)
      (if (string= target_name "tomato")
	  (place_tomato (elt place_list num) food-size)
	(place-food (elt place_list num) target_name food-size))
      (when fail_catch_flag
	;; retry to catch
	(if (or (> (elt food-size 0) 50) (> (elt food-size 1) 50))
	    (progn
	      (if (or (> (elt food-size 0) 60) (> (elt food-size 1) 60))
		  (open-tongs 2)
		(open-tongs 1)))
	  (open-tongs 0))
	(setq offset (v+ offset #f(0 0 -5)))
	(catch-food (elt pos_list num) (elt radi_list num) offset)
	(if (string= target_name "tomato")
	    (place_tomato (elt place_list num) food-size)
	  (place-food (elt place_list num) target_name food-size)))
      )
    )
  )

;;#f(-110.25 9.0407 64.6251) hand-pos - real-pos(rarm)
;;tong(rotate 90)
;;#f(-39.159 -114.508 100.161)

;;11/25トング逆向きにした
;;#f(-22.0 -114.0 100.161)

;;指の開き方
;;#f(-15.449 15.449 15.449 -15.449)) -> 2cm
;;#f(0 0 0 0) -> 4.3cm
;;#f(15.449 -15.449 -15.449 15.449) -> 6.4cm
