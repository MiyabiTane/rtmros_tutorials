#!/usr/bin/env roseus

(defun place-init-pose ()
  (send *hironxjsk* :reset-manip-pose)
  (send *hironxjsk* :larm_joint4 :joint-angle -35)
  (send *hironxjsk* :larm :move-end-pos #f(0 0 100) :world)
  (send *hironxjsk* :rarm :move-end-pos #f(50 0 150) :world)
  (send *hironxjsk* :rarm_joint5 :joint-angle -75)
  (send *hironxjsk* :rarm_joint3 :joint-angle 35)
  (send *hironxjsk* :rarm_joint4 :joint-angle 48)
  (look-73b2-table)
  (send *hironxjsk* :larm :move-end-pos #f(0 160 0) :world)
  (send-robot)
  )

(defun open-tongs (type)
  ;;type 0 -> small object
  ;;type 1 -> big object
  (if (= type 0)
      (send *hironxjsk* :hand-angle-vector :rhand #f(15.449 -15.449 -15.449 15.449))
    (send *hironxjsk* :hand-angle-vector :rhand #f(30.449 -30.449 -30.449 30.449)))
  (send-right-hand 2.0)
  )

(defun close-tongs ()
  (setq close #f(-10 10 10 -10))
  (setq diff 0)
  (while (< diff 2.0)
    (setq prev_hand (send *ri* :hand-angle-vector :rhand))
    (send *hironxjsk* :hand-angle-vector :rhand (v+ prev_hand close))
    (send-right-hand 2.0)
    (setq cur_hand (send *ri* :hand-angle-vector :rhand))
    (setq diff (norm (v- (v- cur_hand prev_hand) close)))
    ;;(format t "diff ~A~%" diff)
    (when (< (elt (send *hironxjsk* :hand-angle-vector :rhand) 0) -16)
      (format t "enough~%")
      (setq diff 3))
    (send-right-hand 2.0)
    )
  (format t "diff ~A~%" diff)
  )

(defun catch-food (pos radi)
  ;;same pose 
  (setq *hiro-pose* (send (send *hironxjsk* :rarm :end-coords) :copy-worldcoords))
  (setq pos (v+ pos *tong-offset*)) ;;tong offset
  (setq pos (v+ pos (float-vector 0 0 (- *catch-z* (elt pos 2))))) ;;set z *catch-z*
  (setq *move* (v- pos (send *hiro-pose* :pos)))
  (send *hiro-pose* :translate *move* :world)
  (send *hironxjsk* :rarm :inverse-kinematics *hiro-pose*)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 70) :world)
  (send-robot)
  ;;おかずに合わせたトングの回転
  ;;意図的調節
  (cond ((> radi 5)
	 (setq radi (- radi (/ (* 5 pi) 180))))
	((< radi -5)
	 (setq radi (+ radi (/ (* 5 pi) 180)))))
  (setq degree (/ (* radi 180) pi))
  (if (> degree 90)
      (setq rot_x (* 114.508 (cos (- radi (/ pi 2)))))
    (setq rot_x (* 114.508 (sin radi))))
  (if (> degree 90)
      (setq rot_y (* 114.508 (+ 1 (sin (- radi (/ pi 2))))))
    (setq rot_y (* 114.508 (- 1 (cos radi)))))
  (setq rotation-offset (float-vector rot_x rot_y 0))
  (send *hironxjsk* :rarm :move-end-pos rotation-offset :world)
  (format t "rot offset ~A~%" rotation-offset)
  (send-robot)
  (setq cur_rotation (send *hironxjsk* :rarm_joint5 :joint-angle))
  (send *hironxjsk* :rarm_joint5 :joint-angle (+ cur_rotation degree))
  (format t "cur ~A rotate ~A~%" cur_rotation degree) 
  (send-robot)
  (when (> degree 30) ;; そのままの向きだとおかずが掴めない
    (setq cur_joint4 (send *hironxjsk* :rarm_joint4 :joint-angle))
    ;;(if (> cur_joint4 20)
	;;(send *hironxjsk* :rarm_joint4 :joint-angle (- cur_joint4 5)))
    (send *hironxjsk* :rarm :move-end-pos #f(0 0 -10) :world)
    (send-robot))
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 -70) :world)
  (send-robot)
  (close-tongs)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 70) :world)
  (if (> degree 30)
      (send *hironxjsk* :rarm_joint4 :joint-angle cur_joint4))
  (send *hironxjsk* :rarm_joint5 :joint-angle cur_rotation)
  (send-robot)
  )

(defun pull_over (pos lbox-pos)
  (setq place-x (elt pos 0))
  (setq place-y (elt pos 1))
  (setq lbox-x (elt lbox-pos 0))
  (setq lbox-y (elt lbox-pos 1))
  (setq size-x (elt food-size 0))
  (setq size-y (elt food-size 1))
  (when (> place-x lbox-x)
    (setq xstart-pos (- (- lbox-x (/ size-x 2)) 5))
    (setq xgoal-pos (- place-x (/ size-x 2))))
  (when (< place-x lbox-x)
    (setq xstart-pos (+ (+ lbox-x (/ size-x 2)) 5))
    (setq xgoal-pos (+ place-x (/ size-x 2))))
  (when (> place-y lbox-y)
    (setq ystart-pos (- (- lbox-y (/ size-y 2)) 5))
    (setq ygoal-pos (- place-y (/ size-y 2))))
  (when (< place-y lbox-y)
    (setq ystart-pos (+ (+ lbox-y (/ size-y 2)) 5))
    (setq ygoal-pos (+ place-y (/ size-y 2))))
  ;;move-to start-pos
  (setq *hiro-pose* (send (send *hironxjsk* :larm :end-coords) :copy-worldcoords))
  (setq start-pos (float-vector xstart-pos ystart-pos (+ *G-z* 60)))
  (setq start-pos (v+ start-pos *chopstick-offset*))
  (setq *move* (v- start-pos (send *hiro-pose* :pos)))
  (send *hironxjsk* :translate *move* :world)
  (send *hironxjsk* :larm :inverse-kinematics *hiro-pose*)
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos #f(0 0 -60) :world)
  (send-robot)
  ;;pull-over
  (send *hironxjsk* :larm :move-end-pos (float-vector (- xgoal-pos xstart-pos) 0 0) :world)
  (send-robot)
  (send *hironxjsk* :larm :move-end-pos (float-vector 0 (- ygoal-pos ystart-pos) 0) :world)
  (send-robot)
  ;;finish
  (send *hironxjsk* :larm :move-end-pos #f(0 0 60) :world)
  (send-robot)
  (place-init-pose)
  )
  
(defun place-food (pos)
  ;;same pose
  (setq *hiro-pose* (send (send *hironxjsk* :rarm :end-coords) :copy-worldcoords))
  (setq goal (float-vector (elt pos 0) (* (elt pos 1) -1) (elt pos 2)))
  (setq goal (v+ pos (float-vector *front* *left* 0))) ;;*coords*<-lunchbox pos
  ;;お弁当箱の真ん中に入れてから幅寄せする
  (setq lpos (float-vector (/ (+ *front* back) 2) (/ (+ *left* right) 2) 0))
  (setq pos (v+ lpos *tong-offset*)) ;;tong offset
  (setq pos (v+ pos (float-vector 0 0 (- *catch-z* (elt pos 2))))) ;;set z *catch-z*
  (setq *move* (v- pos (send *hiro-pose* :pos)))
  (send *hiro-pose* :translate *move* :world)
  (send *hironxjsk* :rarm :inverse-kinematics *hiro-pose*)
  (send *hironxjsk* :rarm :move-end-pos #f(0 0 80) :world)
  (send-robot)
  (open-tongs 0)
  (place-init-pose)
  ;;(pull_over goal lpos)
  )

(setq *tong-offset* #f(-22.0 -114.0 100.161))
(setq *chopstick-offset* #f(-12.624 18.437 84.2388))
(defun catch_and_place_main()
  (format t "- - - CATCH AND PLACE - - -~%")
  (place-init-pose)
  (dotimes (i (length place_list))
    (format t "num : ~A~%" i)
    (when (> (elt (elt place_list i) 0) 0)
      (format t "target : ~A~%" (elt name_list i))
      (setq food-size (elt box_list i))
      (if (or (> (elt food-size 0) 30) (> (elt food-size 1) 30))
	  (open-tongs 1)
	(open-tongs 0))
      (catch-food (elt pos_list i) (elt radi_list i))
      (place-food (elt place_list i))
      )
    )
  )

;;#f(-110.25 9.0407 64.6251) hand-pos - real-pos(rarm)
;;tong(rotate 90)
;;#f(-39.159 -114.508 100.161)

;;11/25トング逆向きにした
;;#f(-22.0 -114.0 100.161)
